# -*- coding: utf-8 -*-
"""Manim By Examples.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jQQjp1Rp67wTY1fbfS7uuEa6JoYL7y45
"""

!sudo apt update
!sudo apt install libcairo2-dev ffmpeg \
    texlive texlive-latex-extra texlive-fonts-extra \
    texlive-latex-recommended texlive-science \
    tipa libpango1.0-dev
!pip install manim
!pip install IPython --upgrade

from manim import *

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING SquareToCircle
# 
# class SquareToCircle(Scene):
#    def construct(self):
#       square = Square()
#       circle = Circle()
#       circle.set_fill(PINK, opacity=0.5)
#       self.play(Create(square))
#       self.play(Transform(square, circle))
#       self.wait()

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING SquareToCircle
# 
# class SquareToCircle(Scene):
#     def construct(self):
#         circle = Circle()
#         square = Square()
#         square.flip(RIGHT)
#         square.rotate(-3 * TAU / 8)
#         circle.set_fill(PINK, opacity=0.5)
# 
#         self.play(Create(square))
#         self.play(Transform(square, circle))
#         self.play(FadeOut(square))

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING WarpSquare
# 
# class WarpSquare(Scene):
#     def construct(self):
#         square = Square()
#         self.play(
#             ApplyPointwiseFunction(
#                 lambda point: complex_to_R3(np.exp(R3_to_complex(point))), square
#             )
#         )
#         self.wait()

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING WriteStuff
# 
# class WriteStuff(Scene):
#     def construct(self):
#         example_text = Tex("This is some text", tex_to_color_map={"text": YELLOW})
#         example_tex = MathTex(
#             "\\sum_{k=1}^\\infty {1 \\over k^2} = {\\pi^2 \\over 6}",
#         )
#         group = VGroup(example_text, example_tex)
#         group.arrange(DOWN)
#         group.set(width=config["frame_width"] - 2 * LARGE_BUFF)
# 
#         self.play(Write(example_text))
#         self.play(Write(example_tex))
#         self.wait()

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING UpdatersExample
# 
# class UpdatersExample(Scene):
#     def construct(self):
#         decimal = DecimalNumber(
#             0,
#             show_ellipsis=True,
#             num_decimal_places=3,
#             include_sign=True,
#         )
#         square = Square().to_edge(UP)
# 
#         decimal.add_updater(lambda d: d.next_to(square, RIGHT))
#         decimal.add_updater(lambda d: d.set_value(square.get_center()[1]))
#         self.add(square, decimal)
#         self.play(
#             square.animate.to_edge(DOWN),
#             rate_func=there_and_back,
#             run_time=5,
#         )
#         self.wait()

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING OpeningManim
# 
# class OpeningManim(Scene):
#     def construct(self):
#         title = Tex(r"This is some \LaTeX")
#         basel = MathTex(r"\sum_{n=1}^\infty \frac{1}{n^2} = \frac{\pi^2}{6}")
#         VGroup(title, basel).arrange(DOWN)
#         self.play(
#             Write(title),
#             FadeIn(basel, shift = UP),
#         )
#         self.wait()
# 
#         transform_title = Tex("That was a transform")
#         transform_title.to_corner(UP + LEFT)
#         self.play(
#             Transform(title, transform_title),
#             LaggedStart(*[FadeOut(obj, shift=DOWN) for obj in basel]),
#         )
#         self.wait()
# 
#         grid = NumberPlane(x_range=(- 10, 10, 1), y_range=(- 6.0, 6.0, 1))
#         grid_title = Tex("This is a grid")
#         grid_title.scale(1.5)
#         grid_title.move_to(transform_title)
# 
#         self.add(grid, grid_title)  # Make sure title is on top of grid
#         self.play(
#             FadeOut(title),
#             FadeIn(grid_title, shift=DOWN),
#             Create(grid, run_time=3, lag_ratio=0.1),
#         )
#         self.wait()
# 
#         grid_transform_title = Tex(
#             r"That was a non-linear function \\ applied to the grid"
#         )
#         grid_transform_title.move_to(grid_title, UL)
#         grid.prepare_for_nonlinear_transform()
#         self.play(
#             grid.animate.apply_function(
#                 lambda p: p
#                 + np.array(
#                     [
#                         np.sin(p[1]),
#                         np.sin(p[0]),
#                         0,
#                     ]
#                 )
#             ),
#             run_time=3,
#         )
#         self.wait()
#         self.play(Transform(grid_title, grid_transform_title))
#         self.wait()

"""Positioning Mobjects"""

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING SquareAndCircle
# class SquareAndCircle(Scene):
#     def construct(self):
#         circle = Circle()  # create a circle
#         circle.set_fill(PINK, opacity=0.5)  # set the color and transparency
# 
#         square = Square()  # create a square
#         square.set_fill(BLUE, opacity=0.5)  # set the color and transparency
# 
#         square.next_to(circle, RIGHT, buff=0.5)  # set the position
#         self.play(Create(circle), Create(square))  # show the shapes on screen
#

"""Using .animate syntax to animate methods"""

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING AnimatedSquareToCircle
# class AnimatedSquareToCircle(Scene):
#     def construct(self):
#         circle = Circle()  # create a circle
#         square = Square()  # create a square
# 
#         self.play(Create(square))  # show the square on screen
#         self.play(square.animate.rotate(PI / 4))  # rotate the square
#         self.play(
#             ReplacementTransform(square, circle)
#         )  # transform the square into a circle
#         self.play(
#             circle.animate.set_fill(PINK, opacity=0.5)
#         )  # color the circle on screen

"""Text Square and Triangle"""

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING Testing
# class Testing(Scene):
#     def construct(self):
#         name =Tex('Khalid').to_edge(UL,buff=0.5)
#         sq=Square(side_length=0.5,fill_color=BLUE,fill_opacity=1).shift(LEFT*3)
#         tri=Triangle().scale(0.6).to_edge(DR)
#         self.play(Write(name))
#         self.play(DrawBorderThenFill(sq),run_time=2)
#         self.play(Create(tri))
#         self.wait()
#         self.play(name.animate.to_edge(UR),run_time=2)
#         self.play(sq.animate.scale(2),tri.animate.to_edge(DL),run_time=3)
#         self.wait(2)

"""Creating Logo"""

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING ManimCELogo
# class ManimCELogo(Scene):
#     def construct(self):
#         self.camera.background_color = "#ece6e2"
#         logo_green = "#87c2a5"
#         logo_blue = "#525893"
#         logo_red = "#e07a5f"
#         logo_black = "#343434"
#         ds_m = MathTex(r"\mathbb{M}", fill_color=logo_black).scale(7)
#         ds_m.shift(2.25 * LEFT + 1.5 * UP)
#         circle = Circle(color=logo_green, fill_opacity=1).shift(LEFT)
#         square = Square(color=logo_blue, fill_opacity=1).shift(UP)
#         triangle = Triangle(color=logo_red, fill_opacity=1).shift(RIGHT)
#         logo = VGroup(triangle, square, circle, ds_m)  # order matters
#         logo.move_to(ORIGIN)
#         self.add(logo)

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING ManimCELogo
# class ManimCELogo(Scene):
#     def construct(self):
#         self.camera.background_color = "#ece6e2"
#         logo_green = "#87c2a5"
#         logo_blue = "#525893"
#         logo_red = "#e07a5f"
#         logo_black = "#343434"
#         ds_m = MathTex(r"\mathbb{K}", fill_color=logo_black).scale(7)
#         ds_m.shift(2.25 * LEFT + 1.5 * UP)
#         circle = Circle(color=logo_green, fill_opacity=1).shift(LEFT)
#         square = Square(color=logo_blue, fill_opacity=1).shift(UP)
#         triangle = Triangle(color=logo_red, fill_opacity=1).shift(RIGHT)
#         logo = VGroup(square, circle, triangle, ds_m)  # order matters
#         logo.move_to(ORIGIN)
#         self.add(logo)

# Placing Mobjects

class Shapes(Scene):
  def construct(self):
    circ=Circle()
    sqr=Square()
    tri=Triangle()
    # now shifting
    circ.shift(LEFT) 
    sqr.shift(RIGHT)
    tri.shift(DOWN)

    self.add(circ,sqr,tri)
    self.wait()

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING Placement
# class Placement(Scene):
#   def construct(self):
#     cir=Circle()
#     sqr=Square()
#     tri=Triangle()
# 
#     cir.move_to(LEFT*2)
#     sqr.next_to(cir,LEFT)
#     tri.align_to(cir,LEFT)
#     self.add(cir,sqr,tri)
#     self.wait(2)

from manim import *

# Styling

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING StylingMobjects
# class StylingMobjects(Scene):
#   def construct(self):
#     cir=Circle().shift(LEFT)
#     sqr=Square().shift(UP)
#     tri=Triangle().shift(RIGHT)
# 
#     cir.set_stroke(color=GREEN,opacity=1,width=20)
#     sqr.set_fill(color=YELLOW,opacity=1)
#     tri.set_fill(color=PINK,opacity=0.5)
#     self.add(sqr,cir,tri) # here order of adding or creation matters 
#     self.wait(2)
#

# SOme animations

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING Animate1
# class Animate1(Scene):
#   def construct(self):
#     sqr=Square(color=GREEN,fill_opacity=1)
#     self.play(FadeIn(sqr))  # one secd
#     self.play(Rotate(sqr,PI/4))   #one second
#     self.play(FadeOut(sqr))    #one second
#     self.add(sqr)
#     self.wait()

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING tut1
# class tut1(Scene):
#   def construct(self):
#     tri=Triangle(color=RED,fill_opacity=1)
#     self.play(FadeIn(tri))
#     self.wait()
#     self.add(tri)
#     self.wait()
#     self.play(tri.animate.set_fill(WHITE).rotate(PI/3).shift(DOWN))
#     
#     self.wait()

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING tut2
# class tut2(Scene):
#   def construct(self):
#     cir=Circle(color=YELLOW,fill_opacity=1)
#     self.play(FadeIn(cir))
#     self.wait()
#     self.add(cir)
#     self.play(cir.animate.shift(UP*5),run_time=5)
# 
#

#  Creating Custom Animations

class CountingScene(Scene):
    def construct(self):
        # Create Decimal Number and add it to scene
        number = DecimalNumber().set_color(WHITE).scale(5)
        # Add an updater to keep the DecimalNumber centered as its value changes
        number.add_updater(lambda number: number.move_to(ORIGIN))

        self.add(number)

        self.wait()

        # Play the Count Animation to count from 0 to 100 in 4 seconds
        self.play(Count(number, 0, 100), run_time=4, rate_func=linear)

        self.wait()

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING MobjectExample
# class MobjectExample(Scene):
#     def construct(self):
#         p1= [-1,-1,0]
#         p2= [1,-1,0]
#         p3= [1,1,0]
#         p4= [-1,1,0]
#         a = Line(p1,p2).append_points(Line(p2,p3).points).append_points(Line(p3,p4).points)
#         point_start= a.get_start()
#         point_end  = a.get_end()
#         point_center = a.get_center()
#         self.add(Text(f"a.get_start() = {np.round(point_start,2).tolist()}", font_size=24).to_edge(UR).set_color(YELLOW))
#         self.add(Text(f"a.get_end() = {np.round(point_end,2).tolist()}", font_size=24).next_to(self.mobjects[-1],DOWN).set_color(RED))
#         self.add(Text(f"a.get_center() = {np.round(point_center,2).tolist()}", font_size=24).next_to(self.mobjects[-1],DOWN).set_color(BLUE))
# 
#         self.add(Dot(a.get_start()).set_color(YELLOW).scale(2))
#         self.add(Dot(a.get_end()).set_color(RED).scale(2))
#         self.add(Dot(a.get_top()).set_color(GREEN_A).scale(2))
#         self.add(Dot(a.get_bottom()).set_color(GREEN_D).scale(2))
#         self.add(Dot(a.get_center()).set_color(BLUE).scale(2))
#         self.add(Dot(a.point_from_proportion(0.5)).set_color(ORANGE).scale(2))
#         self.add(*[Dot(x) for x in a.points])
#         self.add(a)

# Transforming Mobjects into other mobjects

